COMPILING FREELING IN Linux
===========================

This file describes how to build FreeLing from source using g++

Unless you have a special interest in compiling FreeLing, installing it from a binary package is recommended.
Following the procedure described here makes sense only in one of the following cases:
   - You want to use a development FreeLing version for which there is no binary package yet.
   - You want to modify or extend FreeLing.


PRELIMINARIES
=============

1.- Install g++ and related packages.
    Installing meta-package "build-essential" will do the trick in most distributions.

2.- Install CMake (3.7 or newer).  If your distro has an older version, download the binary
    package for linux from https://cmake.org/download/

3.- Decide where will you install FreeLing (e.g. /home/user/freeling, /home/user/programs/freeling)
    and create this folder.
    You can omit this, and FreeLing will be installed in the default location /usr/local
    From this point on, we will refer to FreeLing installation folder as $FLINSTALL


INSTALL DEPENDENCIES
====================

3.- Some external libraries are required to compile FreeLing:

  * libboost & libicu libraries. Included in all Linux distributions. You probably do not have all neeeded components installed. Make sure to install both runtime and development packages for:
        libicu
        libboost-regex
        libboost-system
        libboost-thread
        libboost-program-options
        libboost-locale (only required for MacOSX or FreeBSD, not required in Linux)

  * libz compression library. Included in all Linux distributions. You probably do not have all neeeded components installed. Make sure to install both runtime and development packages for:
        zlib


BUILD FREELING
==============

4.- Compile FreeLing
     a.- Download FreeLing source zipfile from GitHub (or clone git repository)
     b.- Unzip the source file 
     c.- Change to the folder where you unzipped the source
     d.- Execute
           mkdir build
           cd build
           cmake .. 
           make install

      This will install FreeLing in /usr/local.  To change the destination directory,
      add option -DCMAKE_INSTALL_PREFIX=$FLINSTALL to cmake command.

      Note that cmake does not create an "uninstall" target. So, if you install in /usr/local,
      you may need to selectively remove files if you want to uninstall FreeLing

      If you installed in a custom folder and want a clean re-install, you can delete
      folder $FLINSTALL, and run "make install" again from the "build" folder.

      If you want a clean re-build, you can delete the "build" folder, and repeat the 
      whole procedure.

    Available options that can be added to "cmake" command:

      -DCMAKE_INSTALL_PREFIX=[path]  Install FreeLing in given location (default: /usr/local)

      -DTRACES=ON        Build FreeLing with debugging traces (default: OFF)
      -DWARNINGS=OFF     Build FreeLing without warning messages (default: ON)
      -DXPRESSIVE=ON     Build FreeLing using boost::xpressive regexps instead of boost::regex  (default: OFF)
      -DEMBEDDINGS=ON    Download word embeddings files when installing (default: OFF)

      -DJAVA_API=ON      Build Java API (see "Observations" below before running cmake) (default: OFF)
      -DPYTHON2_API=ON   Build Python 2 API (see "Observations" below before running cmake) (default: OFF)
      -DPYTHON3_API=ON   Build Python 3 API (see "Observations" below before running cmake) (default: OFF)


5.- Execute FreeLing

      a.- Execute "analyze" file:
           $FLINSTALL/analyze -f en.cfg < myfile.txt

          Check FreeLing manual (https://talp-upc.gitbooks.io/freeling-user-manual/),
          section "Using the analyze script", to find out the parameters it accepts.

          Note that the input text must be UTF8 encoded.
	  You can provide input from the terminal and end it with ctl-D
	

9.- Call FreeLing library from Python or Java (optional)

   If you don't want to write Python or Java programs that call Freeling, you can
   skip this section.

   To be able to call FreeLing from Python or Java, you should ahve built it with
   options -DPYTHON2_API, -DPYTHON3_API, or -DJAVA_API, depending on your target.


   PYTHON
   ------
  
    If you built the Python2 (or Python3)  API, you'll find
    in %FLINSTALL%/share/freeling/APIs/python2 (or %FLINSTALL%/share/freeling/APIs/python3)
    the following files:

        pyfreeling.py    FreeLing python module, to be imported from your program.
	                 Must be in the same folder than your program or in a folder
			 included in $PYTHONPATH

        _pyfreeling.so  The actual API DLL, bridging between Python and C++.
	                Must be in the same folder than your program or in a folder
			included in $LD_LIBRARY_PATH

        sample.py        An example of a python program that calls FreeLing.
	
    To run the example, do:
    
        cd %FLINSTALL%/share/freeling/APIs/python
        python sample.py < mytext.txt

    * If you get "ImportError" about not found modules, you need to add to
    $LD_LIBRARY_PATH the path where all the required libraries (freeling and
    all its dependencies) are found, as well as the _pyfreeling.so API library
    (you need to do this only once per session, or you can set it once
    and forever in your system-wide configuration)

    * If you get "FREELINGDIR not defined", you need to set the location where
    FreeLing was installed:
       
       set FREELINGDIR=$FLINSTALL
       
    (this is because the example program "sample.py" checks that variable, it is
     not a general requirement of the API)
    

   JAVA
   ----
  
    If you built the Java API, you'll find
    in %FLINSTALL%/share/freeling/APIs/java the following files:

        Jfreeling.jar    FreeLing Java module, to be imported from your program.
	                 Must be included in $CLASSPATH

        Jfreeling.so   The actual API DLL, bridging between Java and C++.
                       They both must be in the same folder than your program
	               or in a folder included in $LD_LIBRARY_PATH

        Analyzer.java  An example of a Java program that calls FreeLing.
	
    To run the example, do:
    
        cd %FLINSTALL%/share/freeling/APIs/java
	javac Analyzer.java
        java Analyzer < mytext.txt

    * If you get "UnsatisfiedLinkError" about not found libraries, you need to
    set $LD_LIBRARY_PATH so all the required libraries (freeling and all its dependencies) 
    are found (you need to do this only once per session, or you can set it once
    and forever in your system-wide configuration):

    * If you get "FREELINGDIR not defined", you need to set the location where
    FreeLing was installed:
       
       set FREELINGDIR=$FLINSTALL
       
    (this is because the example program "Analyzer.java" checks that variable, it is
     not a general requirement of the API)

    * If you get memory-related errors (allocation error, array out of range, etc), it
    may be that your JVM has to few memory for FreeLing.  Try with -Xmx1G or more.


OBSERVATIONS
============

 ** APIs REQUIREMENTS
    
    If you want to call FreeLing library from Python or Java, you need to install some
    extra software before building FreeLing

   A1.- Install SWIG.
        Available as a package in most distributions.
        If not, you can download the source from  http://swig.org and compile it.

   A2.- Install target language, including interfaces, that is:
      * For Python: Install Python2 or Python3.
                    Make sure you install also development headers (e.g. package python3-dev)
      * For Java: Install Java Development Kit.

   A3.- Add the following options to the "cmake" command
      -DPYTHON2_API=ON     (if you want to build Python 2 API. Not compatible with -DPYTHON3_API)
      -DPYTHON3_API=ON     (if you want to build Python 3 API. Not compatible with -DPYTHON2_API)
      -DJAVA_API=ON        (if you want to build Java API)


 ** Using Python2 instead of Python3

    FreeLing uses UTF8 encoding to support multilinguality. Python3 is native
    in UTF8, which provides a much smoother integration with FreeLing.

    However, you can use FreeLing from Python2 too (though if you encounter
    encoding problems, don't complain, we told you so...)
    Just specify cmake option -DPYTHON2_API instead of -DPYTHON3_API.
 
